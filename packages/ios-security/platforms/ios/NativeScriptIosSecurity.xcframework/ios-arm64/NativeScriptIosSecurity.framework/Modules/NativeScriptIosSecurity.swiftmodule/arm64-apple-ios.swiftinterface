// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NativeScriptIosSecurity
import CommonCrypto
import Darwin
import Foundation
import MachO
@_exported import NativeScriptIosSecurity
import Swift
import UIKit
public enum FileIntegrityCheck {
  case bundleID(Swift.String)
  case mobileProvision(Swift.String)
  case machO(Swift.String, Swift.String)
}
extension FileIntegrityCheck {
  public var description: Swift.String {
    get
  }
}
public typealias FileIntegrityCheckResult = (result: Swift.Bool, hitChecks: [NativeScriptIosSecurity.FileIntegrityCheck])
public enum IntegrityCheckerImageTarget {
  case `default`
  case custom(Swift.String)
}
public typealias FailedCheck = (check: NativeScriptIosSecurity.JailbreakCheck, failMessage: Swift.String)
public enum JailbreakCheck : Swift.CaseIterable {
  case urlSchemes
  case existenceOfSuspiciousFiles
  case suspiciousFilesCanBeOpened
  case restrictedDirectoriesWriteable
  case fork
  case symbolicLinks
  case dyld
  public static func == (a: NativeScriptIosSecurity.JailbreakCheck, b: NativeScriptIosSecurity.JailbreakCheck) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [NativeScriptIosSecurity.JailbreakCheck]
  public static var allCases: [NativeScriptIosSecurity.JailbreakCheck] {
    get
  }
}
@objc public class FileIntegrityCheckFacade : ObjectiveC.NSObject {
  public var origin: NativeScriptIosSecurity.FileIntegrityCheck
  @objc public init(bundleID: Swift.String)
  @objc public init(mobileProvision: Swift.String)
  @objc public init(machO: Swift.String, machO1: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class SecurityFacade : ObjectiveC.NSObject {
  @objc public static func amIJailbroken() -> Swift.Bool
  @objc public static func amIDebugged() -> Swift.Bool
  @objc public static func amIRunInEmulator() -> Swift.Bool
  @objc public static func denyDebugger()
  @objc public static func amIReverseEngineered() -> Swift.Bool
  @objc public static func amIProxied() -> Swift.Bool
  @objc public static func amITampered(_ checks: [NativeScriptIosSecurity.FileIntegrityCheckFacade]) -> [Any]
  @objc public static func amIRuntimeHooked(dyldWhiteList: [Swift.String], detectionClass: Swift.AnyClass, selector: ObjectiveC.Selector, isClassMethod: Swift.Bool) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
public class IOSSecuritySuite {
  public static func amIJailbroken() -> Swift.Bool
  public static func amIJailbrokenWithFailMessage() -> (jailbroken: Swift.Bool, failMessage: Swift.String)
  public static func amIJailbrokenWithFailedChecks() -> (jailbroken: Swift.Bool, failedChecks: [NativeScriptIosSecurity.FailedCheck])
  public static func amIRunInEmulator() -> Swift.Bool
  public static func amIDebugged() -> Swift.Bool
  public static func denyDebugger()
  public static func amITampered(_ checks: [NativeScriptIosSecurity.FileIntegrityCheck]) -> NativeScriptIosSecurity.FileIntegrityCheckResult
  public static func amIReverseEngineered() -> Swift.Bool
  public static func amIRuntimeHooked(dyldWhiteList: [Swift.String], detectionClass: Swift.AnyClass, selector: ObjectiveC.Selector, isClassMethod: Swift.Bool) -> Swift.Bool
  public static func amIProxied() -> Swift.Bool
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension IOSSecuritySuite {
  public static func amIMSHooked(_ functionAddress: Swift.UnsafeMutableRawPointer) -> Swift.Bool
  public static func denyMSHook(_ functionAddress: Swift.UnsafeMutableRawPointer) -> Swift.UnsafeMutableRawPointer?
  public static func denySymbolHook(_ symbol: Swift.String)
  public static func denySymbolHook(_ symbol: Swift.String, at image: Swift.UnsafePointer<MachO.mach_header>, imageSlide slide: Swift.Int)
  public static func getMachOFileHashValue(_ target: NativeScriptIosSecurity.IntegrityCheckerImageTarget = .default) -> Swift.String?
  public static func findLoadedDylibs(_ target: NativeScriptIosSecurity.IntegrityCheckerImageTarget = .default) -> [Swift.String]?
  public static func hasBreakpointAt(_ functionAddr: Swift.UnsafeRawPointer, functionSize: Darwin.vm_size_t?) -> Swift.Bool
}
